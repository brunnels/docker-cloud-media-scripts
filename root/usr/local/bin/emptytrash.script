#!/bin/bash
. "util"

check_running

plex_url=$(printenv PLEX_URL | tr -d '"' | tr -d "'")
plex_token=$(printenv PLEX_TOKEN | tr -d '"' | tr -d "'")

getSections() {
    if [[ -z "${plex_url}" ]]; then
        error "Fill in plex url and plex token to retrieve sections. Aborting..."
        exit 03
    fi

    sections=$(curl -s -G -L "${plex_url}/library/sections?X-Plex-Token=${plex_token}" | sed -n 's/.*key="\([^"]*\).*/\1/p')
    echo ${sections}
}

isRefreshing() {
    refreshing=$(curl -s -G -L "${plex_url}/library/sections?X-Plex-Token=${plex_token}" | grep 'refreshing="1"')
    echo ${refreshing}
}

emptyTrash() {
    . "check"

    if [[ "$all_good" -eq "1" ]]; then
        info "Library refreshing"
        curl -s -G -L "${plex_url}/library/sections/all/refresh?X-Plex-Token=${plex_token}"
        while true; do
            sleep 10
            if [[ -z $(isRefreshing) ]]; then
                break
            fi
        done
        info "Library refresh completed"

        sections=$(getSections)
        if [[ -z "${sections}" ]]; then
            error "Could not get sections from '${plex_url}' with the inserted token. Aborting..."
            exit 03
        fi

        for i in ${sections}
        do
            if [[ ! -z "${i}" ]]; then
                info "Empty trash for section '${i}'"
                curl -s -X PUT -L "${plex_url}/library/sections/${i}/emptyTrash?X-Plex-Token=${plex_token}"
            fi
        done

        exit 0
    else
        error "Mount checks failed. Aborting..."
        exit 03
    fi
}

emptyTrash
