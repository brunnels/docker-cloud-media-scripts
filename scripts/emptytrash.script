#!/bin/bash
###############################################################################
# CONFIGURATION
###############################################################################
# shellcheck source=config

. "config"
##############################################################################

# If script is already running; abort.
if pidof -o %PPID -x "$(basename "$0")"; then
	echo "$(date "$(printenv DATE_FORMAT)") WARN: $(basename "$0") already running. Aborting."
	exit 3
fi

plex_url=$(printenv PLEX_URL | tr -d '"' | tr -d "'")
plex_token=$(printenv PLEX_TOKEN | tr -d '"' | tr -d "'")

getSections() {
  if [[ -z "${plex_url}" ]]; then
    echo "$(date "$(printenv DATE_FORMAT)") ERROR: Fill in plex url and plex token to retrieve sections. Aborting..."
    exit 02
  fi

  sections=$(curl -s -G -L "${plex_url}/library/sections?X-Plex-Token=${plex_token}" | sed -n 's/.*key="\([^"]*\).*/\1/p')
  echo $sections
}

isRefreshing() {
  refreshing=$(curl -s -G -L "${plex_url}/library/sections?X-Plex-Token=${plex_token}" | grep 'refreshing="1"')
  echo $refreshing
}

emptyTrash() {
  . "check"

  if [[ "$all_good" -eq "1" ]]; then
    echo "$(date "$(printenv DATE_FORMAT)") NOTICE: Library refreshing"
    curl -s -G -L "${plex_url}/library/sections/all/refresh?X-Plex-Token=${plex_token}"
    while true; do
      sleep 10
      if [[ -z $(isRefreshing) ]]; then
          break
      fi
    done
    echo "$(date "$(printenv DATE_FORMAT)") NOTICE: Library refresh completed"

    sections=$(getSections)
    if [[ -z "${sections}" ]]; then
      echo "$(date "$(printenv DATE_FORMAT)") ERROR: Could not get sections from '${plex_url}' with the inserted token. Aborting..."
      exit 02
    fi

    for i in $sections
    do
      if [[ ! -z "${i}" ]]; then
        echo "$(date "$(printenv DATE_FORMAT)") NOTICE: Empty trash for section '${i}'"
        curl -s -X PUT -L "${plex_url}/library/sections/${i}/emptyTrash?X-Plex-Token=${plex_token}"
      fi
    done

    exit 0
  else
    echo "$(date "$(printenv DATE_FORMAT)") ERROR: Mount is not up after mountcheck. Aborting..."
    exit 02
  fi
}
    
emptyTrash
