#!/bin/bash
###############################################################################
# CONFIGURATION
###############################################################################
# shellcheck source=config

. "config"
##############################################################################
mount_read_gdrive () {
	check_rclone_read

	if [[ ! -d "${read_decrypt_dir}" ]]; then
		mkdir -p "${read_decrypt_dir}"
	fi

	if [[ $(ps -ef | grep "rclone" | grep -v "grep" | wc -l) == "0" ]]; then
		echo "[ $(date $(printenv DATE_FORMAT)) ] Mounting read Google Drive: ${read_decrypt_dir}"
		rclone mount ${rclone_read_mount_options} "$@" "${rclone_read_endpoint}" "${read_decrypt_dir}" &
	else
		echo "[ $(date $(printenv DATE_FORMAT)) ] Google Drive read mountpoint: ${read_decrypt_dir} already mounted."
	fi

	sleep 5

	while [[ -z "$(ls -A ${read_decrypt_dir})" ]]
	do
		echo "Waiting for mount ${read_decrypt_dir} ..."
		sleep 10
	done
}

mount_gdrive () {
	check_rclone_cloud

	if [[ ! -d "${cloud_decrypt_dir}" ]]; then
		mkdir -p "${cloud_decrypt_dir}"
	fi

  # we're checking for true here because the rclone_read_endpoint should already be mounted
	if [[ $(ps -ef | grep "rclone" | grep -v "grep" | wc -l) == "1" ]]; then
		echo "[ $(date $(printenv DATE_FORMAT)) ] Mounting direct Google Drive: ${cloud_decrypt_dir}"
		rclone mount ${rclone_mount_options} "$@" "${rclone_cloud_endpoint}" "${cloud_decrypt_dir}" &
	else
		echo "[ $(date $(printenv DATE_FORMAT)) ] Google Drive read mountpoint: ${rclone_mount_options} NOT already mounted. Bugging out"
		exit 02
	fi
}

mount_union () {
	if [[ ! -d "${local_media_dir}" ]]; then
		mkdir -p "${local_media_dir}"
	fi

	if [[ ! -d "${local_decrypt_dir}" ]]; then
		mkdir -p "${local_decrypt_dir}"
	fi

  if [[ $(ps -ef | grep "mergerfs" | grep -v "grep" | wc -l) == "0" ]]; then
    mfs_mounts="${local_decrypt_dir}:${read_decrypt_dir}:${cloud_decrypt_dir}"
    echo "[ $(date $(printenv DATE_FORMAT)) ] Mounting mergerfs: ${local_media_dir}"
    mergerfs ${mfs_options} "${mfs_mounts}" "${local_media_dir}"
  else
    echo "[ $(date $(printenv DATE_FORMAT)) ] Union mountpoint: ${local_media_dir} already mounted."
  fi
}

install_cron () {
	#Output environmental variables for cron
	env >> /etc/environment
	echo "${cloud_upload_time} cloudupload >> ${cron_log} 2>&1" >> /etc/crontabs/root
	echo "${rm_delete_time} rmlocal >> ${cron_log} 2>&1" >> /etc/crontabs/root
	crond -b
}

precache () {
	if ([[ "$(printenv RCLONE_PRECACHE)" == "1" ]]); then
		rclone rc vfs/refresh recursive=true
	fi
}

###############################################################################

if pidof -o %PPID -x "$(basename "$0")"; then
	echo "[ $(date $(printenv DATE_FORMAT)) ] Mount already in progress. Aborting."
else
	mount_read_gdrive
	mount_gdrive
	mount_union
	install_cron
	precache
fi

exit 0
