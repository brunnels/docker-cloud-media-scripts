#!/bin/bash
. "variables"

log () {
  if [[ -z "${1}" ]]; then
    log "ERROR" "log level required"
    exit 3
  fi

  if [[ -z "${2}" ]]; then
    log "ERROR" "log message required"
    exit 3
  fi

  if [[ "$(printenv DEBUG_ENABLED)" == "1" ]] || [[ ${1} != "DEBUG" ]]; then
    echo "$(date "$(printenv DATE_FORMAT)") ${1}: ${2}"
  fi
}

rclone_unmount () {
  if [[ -z "${1}" ]]; then
    log "ERROR" "unmount path required"
    exit 3
  fi

  fusermount -uz "${1}"

  while [[ "$(ls -A ${1})" ]]
  do
    log "WARN" "Waiting for unmount of ${1} ..."
    sleep 1
  done
}

check_running () {
  parent=$(ps $PPID | tail -n 1 | awk "{print \$6}")
  if [[ ${parent} != "/usr/local/bin/runscript" ]]; then
    log "ERROR" "Cannot run $(basename "$0") directly. Called from ${parent}. Aborting."
    exit 3
  fi
}
check_rclone_read () {
	if [[ ! "${rclone_read_endpoint}" == *: ]]; then
		log "ERROR" "Missing colon (:) in RCLONE_READ_ENDPOINT (${rclone_read_endpoint})"
    sleep 5000
		exit 02
	fi

	if [[ "$(rclone listremotes ${rclone_config} | grep "${rclone_read_endpoint}" | wc -l)" == "0" ]]; then
		log "ERROR" "RCLONE_READ_ENDPOINT (${rclone_read_endpoint}) endpoint has not been created within rclone"
		log "ERROR" "ERROR: Run 'docker exec -ti <DOCKER_CONTAINER> rclone_setup'"
    sleep 5000
		exit 02
	fi
}

check_rclone_cloud () {
	if [[ ! "${rclone_cloud_endpoint}" == *: ]]; then
		log "ERROR" "Missing colon (:) in RCLONE_CLOUD_ENDPOINT (${rclone_cloud_endpoint})"
		printf "\n\n"
    sleep 5000
		exit 02
	fi

	if [[ "$(rclone listremotes ${rclone_config} | grep "${rclone_cloud_endpoint}" | wc -l)" == "0" ]]; then
		log "ERROR" "RCLONE_CLOUD_ENDPOINT (${rclone_cloud_endpoint}) endpoint has not been created within rclone"
		log "ERROR" "Run 'docker exec -ti <DOCKER_CONTAINER> rclone_setup'"
    sleep 5000
		exit 02
	fi
}
