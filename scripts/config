#!/bin/bash
. "variables"

rclone_unmount () {
  if [[ -z "${1}" ]]; then
    echo "$(date "$(printenv DATE_FORMAT)") Error: unmount path required"
    exit 3
  fi

  fusermount -uz "${1}"

  while [["$(ls -A ${1})" ]]
  do
    echo "$(date "$(printenv DATE_FORMAT)") NOTICE: Waiting for unmount of ${1} ..."
    sleep 1
  done
}

check_rclone_read () {
	if [[ ! "${rclone_read_endpoint}" == *: ]]; then
		echo "$(date "$(printenv DATE_FORMAT)") ERROR: Missing colon (:) in RCLONE_READ_ENDPOINT (${rclone_read_endpoint})"
    sleep 5000
		exit 02
	fi

	if [[ "$(rclone listremotes ${rclone_config} | grep "${rclone_read_endpoint}" | wc -l)" == "0" ]]; then
		echo "$(date "$(printenv DATE_FORMAT)") ERROR: RCLONE_READ_ENDPOINT (${rclone_read_endpoint}) endpoint has not been created within rclone"
		echo "$(date "$(printenv DATE_FORMAT)") ERROR: Run 'docker exec -ti <DOCKER_CONTAINER> rclone_setup'"
    sleep 5000
		exit 02
	fi
}

check_rclone_cloud () {
	if [[ ! "${rclone_cloud_endpoint}" == *: ]]; then
		echo "$(date "$(printenv DATE_FORMAT)") ERROR: Missing colon (:) in RCLONE_CLOUD_ENDPOINT (${rclone_cloud_endpoint})"
		printf "\n\n"
    sleep 5000
		exit 02
	fi

	if [[ "$(rclone listremotes ${rclone_config} | grep "${rclone_cloud_endpoint}" | wc -l)" == "0" ]]; then
		echo "$(date "$(printenv DATE_FORMAT)") ERROR: RCLONE_CLOUD_ENDPOINT (${rclone_cloud_endpoint}) endpoint has not been created within rclone"
		echo "$(date "$(printenv DATE_FORMAT)") ERROR: Run 'docker exec -ti <DOCKER_CONTAINER> rclone_setup'"
    sleep 5000
		exit 02
	fi
}
